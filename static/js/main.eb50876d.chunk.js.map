{"version":3,"sources":["simon-dice.png","barking-board.png","pokedex.png","contact-information.png","Canvas.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Canvas","props","id","className","width","frame","height","random","number","Math","floor","App","state","showCanvas","showIntro","showWelcome","showItems","canvas","window","innerWidth","innerHeight","colors","draw","bind","setTimeout","this","setState","init","requestAnimationFrame","ratio","time","interval","setInterval","ctx","document","querySelector","getContext","originX","originY","beginPath","moveTo","lineTo","fillStyle","length","fill","clearInterval","onClick","href","target","src","Simon","alt","BarkingBoard","Pokedex","ContactInformation","React","Component","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,iD,uMCQ5BC,EANA,SAACC,GACZ,OAAQ,4BAAQC,GAAG,SAASC,UAAU,SAASC,MAAOH,EAAMI,MAAMD,MAAOE,OAAQL,EAAMI,MAAMC,U,uECiGjG,SAASC,EAAOC,GACd,OAAOC,KAAKC,MAAMD,KAAKF,SAAWC,GAGrBG,M,YA9Fb,WAAYV,GAAQ,IAAD,8BACjB,4CAAMA,KACDW,MAAQ,CACXC,YAAY,EACZC,WAAW,EACXC,aAAa,EACbC,WAAW,EACXC,OAAQ,CACNb,MAA2B,GAApBc,OAAOC,WACdb,OAA6B,GAArBY,OAAOE,aAEjBC,OAAQ,CAAC,UAAW,UAAW,UAAW,UAAW,YAEvD,EAAKC,KAAO,EAAKA,KAAKC,KAAV,gBAbK,E,iFAgBE,IAAD,OAClBC,YAAW,WAAQ,EAAKX,eAAgB,O,mCAG5B,IAAD,OACXY,KAAKC,SAAS,CACZb,YAAY,EACZC,WAAW,IAGbU,YAAW,WAAQ,EAAKG,SAAU,KAClCH,YAAW,WAAQ,EAAKE,SAAS,CAAEX,aAAa,MAAW,MAC3DS,YAAW,WAAQ,EAAKE,SAAS,CAAEV,WAAW,MAAW,Q,6BAKnD,IAAD,OACLE,OAAOU,uBAAsB,WAAQ,EAAKN,KAAK,EAAG,QAClDE,YAAW,WAAQN,OAAOU,uBAAsB,WAAQ,EAAKN,KAAK,EAAG,UAAY,KACjFE,YAAW,WAAQN,OAAOU,uBAAsB,WAAQ,EAAKN,KAAK,GAAI,UAAY,KAClFE,YAAW,WAAQN,OAAOU,uBAAsB,WAAQ,EAAKN,KAAK,GAAI,UAAY,KAClFE,YAAW,WAAQN,OAAOU,uBAAsB,WAAQ,EAAKN,KAAK,GAAI,UAAY,O,2BAI/EO,EAAOC,GAAO,IAAD,OACZC,EAAWC,aAAY,WACzB,IAAIC,EAAMC,SAASC,cAAc,WAAWC,WAAW,MACnDC,EAAU9B,EAAO,EAAKK,MAAMK,OAAOb,OACnCkC,EAAU/B,EAAO,EAAKK,MAAMK,OAAOX,QACvC2B,EAAIM,YACJN,EAAIO,OAAOH,EAASC,GACpBL,EAAIQ,OAAOlC,EAAO,EAAKK,MAAMK,OAAOb,OAASG,EAAO,EAAKK,MAAMK,OAAOX,SACtE2B,EAAIQ,OAAOlC,EAAO,EAAKK,MAAMK,OAAOb,OAASG,EAAO,EAAKK,MAAMK,OAAOX,SACtE2B,EAAIS,UAAa,EAAK9B,MAAMS,OAAOd,EAAO,EAAKK,MAAMS,OAAOsB,SAC5DV,EAAIW,SACH,IAAMf,GAETL,YAAW,WAAcqB,cAAcd,KAAaD,K,+BAG5C,IAAD,OACP,OACE,yBAAK3B,UAAU,OACXsB,KAAKb,MAAME,WACX,uBACEX,UAAU,QACV2C,QAAS,kBAAM,EAAKjC,eAFtB,gEAKAY,KAAKb,MAAMC,YACX,kBAAC,EAAD,CACER,MAAOoB,KAAKb,MAAMK,SAEpBQ,KAAKb,MAAMG,aACX,uBAAGZ,UAAU,qBAAoB,uBAC/BA,UAAU,WADqB,uBAIjCsB,KAAKb,MAAMI,WACX,yBAAKb,UAAU,kBACb,yBAAKA,UAAU,cAAa,uBAAG4C,KAAK,4CAA4CC,OAAO,UAAS,yBAAKC,IAAKC,IAAOC,IAAI,iBACrH,yBAAKhD,UAAU,cAAa,uBAAG4C,KAAK,+CAA+CC,OAAO,UAAS,yBAAKC,IAAKG,IAAcD,IAAI,oBAC/H,yBAAKhD,UAAU,cAAa,uBAAG4C,KAAK,8CAA8CC,OAAO,UAAS,yBAAKC,IAAKI,IAASF,IAAI,cACzH,yBAAKhD,UAAU,cAAa,uBAAG4C,KAAK,+DAA+DC,OAAO,UAAS,yBAAKC,IAAKK,IAAoBH,IAAI,gC,GAlF/II,IAAMC,WCGJC,QACW,cAA7BvC,OAAOwC,SAASC,UAEe,UAA7BzC,OAAOwC,SAASC,UAEhBzC,OAAOwC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS5B,SAAS6B,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.eb50876d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/simon-dice.11e133fe.png\";","module.exports = __webpack_public_path__ + \"static/media/barking-board.97454d85.png\";","module.exports = __webpack_public_path__ + \"static/media/pokedex.81244e2e.png\";","module.exports = __webpack_public_path__ + \"static/media/contact-information.99969086.png\";","import React from \"react\"\r\n\r\nconst Canvas = (props) => {\r\n    return (<canvas id=\"canvas\" className=\"canvas\" width={props.frame.width} height={props.frame.height}></canvas>\r\n    )\r\n}\r\n\r\n\r\nexport default Canvas","import React from 'react';\nimport Canvas from './Canvas'\nimport Simon from \"./simon-dice.png\"\nimport BarkingBoard from \"./barking-board.png\"\nimport Pokedex from \"./pokedex.png\"\nimport ContactInformation from \"./contact-information.png\"\nimport './App.css';\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showCanvas: false,\n      showIntro: true,\n      showWelcome: false,\n      showItems: false,\n      canvas: {\n        width: window.innerWidth * 0.9,\n        height: window.innerHeight * 0.9,\n      },\n      colors: [\"#FCBA04\", \"#A50104\", \"#C03221\", \"#BE7C4D\", \"#F2D0A4\"]\n    }\n    this.draw = this.draw.bind(this)\n  }\n\n  componentDidMount() {\n    setTimeout(() => { this.showCanvas() }, 4000)\n  }\n\n  showCanvas() {\n    this.setState({\n      showCanvas: true,\n      showIntro: false,\n    })\n\n    setTimeout(() => { this.init() }, 2000)\n    setTimeout(() => { this.setState({ showWelcome: true }) }, 14000)\n    setTimeout(() => { this.setState({ showItems: true }) }, 14000)\n\n\n  }\n\n  init() {\n    window.requestAnimationFrame(() => { this.draw(4, 2000) })\n    setTimeout(() => { window.requestAnimationFrame(() => { this.draw(8, 2000) }) }, 2000)\n    setTimeout(() => { window.requestAnimationFrame(() => { this.draw(16, 2000) }) }, 4000)\n    setTimeout(() => { window.requestAnimationFrame(() => { this.draw(32, 2000) }) }, 6000)\n    setTimeout(() => { window.requestAnimationFrame(() => { this.draw(64, 2000) }) }, 8000)\n    \n  }\n\n  draw(ratio, time) {\n    let interval = setInterval(() => {\n      let ctx = document.querySelector(\"#canvas\").getContext(\"2d\")\n      let originX = random(this.state.canvas.width)\n      let originY = random(this.state.canvas.height)\n      ctx.beginPath()\n      ctx.moveTo(originX, originY)\n      ctx.lineTo(random(this.state.canvas.width), (random(this.state.canvas.height)))\n      ctx.lineTo(random(this.state.canvas.width), (random(this.state.canvas.height)))\n      ctx.fillStyle = (this.state.colors[random(this.state.colors.length)])\n      ctx.fill()\n    }, 500 / ratio)\n\n    setTimeout(function () { clearInterval(interval) }, time)\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        {(this.state.showIntro) &&\n          <p\n            className=\"intro\"\n            onClick={() => this.showCanvas()}>\n            Dreams aren't dreams if you devote every waking hour on them</p>}\n\n        {(this.state.showCanvas) &&\n          <Canvas\n            frame={this.state.canvas} />}\n\n        {(this.state.showWelcome) &&\n          <p className=\"welcome-container\"><a\n            className=\"welcome\" >\n            Welcome, stranger.</a></p>}\n\n        {(this.state.showItems) &&\n          <div className=\"item-container\">\n            <div className=\"item itema\"><a href=\"https://classicaljo.github.io/simon-dice/\" target=\"_blank\"><img src={Simon} alt=\"Simon dice\" /></a></div>\n            <div className=\"item itemb\"><a href=\"https://classicaljo.github.io/barking-board/\" target=\"_blank\"><img src={BarkingBoard} alt=\"Barking board\" /></a></div>\n            <div className=\"item itemc\"><a href=\"https://classicaljo.github.io/pokedex-v1.1/\" target=\"_blank\"><img src={Pokedex} alt=\"Pokedex\" /></a></div>\n            <div className=\"item itemd\"><a href=\"https://classicaljo.github.io/contact-information/index.html\" target=\"_blank\"><img src={ContactInformation} alt=\"Contact information\" /></a></div>\n          </div>}\n\n\n      </div>\n    )\n  }\n}\n\nfunction random(number) {\n  return Math.floor(Math.random() * number)\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}